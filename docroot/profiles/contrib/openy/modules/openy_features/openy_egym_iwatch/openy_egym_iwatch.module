<?php

use Drupal\field\Entity\FieldStorageConfig;
use Drupal\node\NodeInterface;
use Drupal\paragraphs\Entity\Paragraph;

/**
 * Implements hook_theme().
 *
 * @param $existing
 * @param $type
 * @param $theme
 * @param $path
 *
 * @return array
 */
function openy_egym_iwatch_theme($existing, $type, $theme, $path) {
  return [
    'paragraph__grid_columns_egym' => [
      'base hook' => 'paragraph',
    ],
    'paragraph__grid_content_egym' => [
      'base hook' => 'paragraph',
    ],
    'paragraph__banner_fixed' => [
      'base hook' => 'paragraph',
    ],
  ];
}

/**
 * Implements hook_preprocess_ENTITY_TYPE().
 */
function openy_egym_iwatch_preprocess_paragraph(array &$variables) {
  if (empty($variables['paragraph'])) {
    return;
  }

  if ($variables['paragraph']->getType() == 'banner_fixed') {
    $variables['#attached']['library'][] = 'openy_egym_iwatch/openy_egym_iwatch';
  }
}

/**
 * Implements hook_module_suggestions_HOOK_alter().
 */
function openy_egym_iwatch_theme_suggestions_paragraph_alter(&$suggestions, array $variables) {
  if ($node = \Drupal::routeMatch()->getParameter('node')) {
    if (count(openy_egym_iwatch_search_node_paragraphs($node, ['banner_fixed']))) {
      if (in_array('paragraph__grid_content', $suggestions)) {
        $suggestions[] = 'paragraph__grid_content_egym';
      }
      if (in_array('paragraph__grid_columns', $suggestions)) {
        $suggestions[] = 'paragraph__grid_columns_egym';
      }
    }
  }
}

/**
 * Helper function that search needed paragraph at the node.
 *
 * @param $node
 *   Node object.
 * @param array $paragraph_bundles
 *   List of paragraph bundles.
 * @param string $node_field_id
 *  Field where to search.
 *
 * @return array
 *   Found paragraph.
 */
function openy_egym_iwatch_search_node_paragraphs(NodeInterface $node, array $paragraph_bundles, $node_field_id = '') {

  $found_paragraphs = [];
  $field_ids = [];
  if (empty($node_field_id)) {
    // Get all the entity reference revisions fields.
    $map = \Drupal::service('entity_field.manager')
      ->getFieldMapByFieldType('entity_reference_revisions');

    // Get all fields of the node with paragraphs.
    $entity_type_id = 'node';
    foreach ($map[$entity_type_id] as $name => $data) {
      $target_type = FieldStorageConfig::loadByName($entity_type_id, $name)
        ->getSetting('target_type');

      if ($target_type == 'paragraph' && $node->hasField($name)) {
        $field_ids[] = $name;
      }
    }
  }
  else {
    $field_ids[] = $node_field_id;
  }

  // Come through all paragraphs of all fields and execute relevant actions.
  foreach ($field_ids as $field_id) {
    if (!$node->hasField($field_id)) {
      continue;
    }
    $field = $node->get($field_id)->getValue();
    foreach ($field as $field_paragraph) {
      /** @var \Drupal\paragraphs\Entity\Paragraph $paragraph */
      $paragraph = Paragraph::load($field_paragraph['target_id']);

      if ($paragraph && (empty($paragraph_bundles) || in_array($paragraph->bundle(), $paragraph_bundles))) {
        $found_paragraphs[] = $paragraph;
      }
    }
  }
  return $found_paragraphs;
}

/**
 * Implements hook_system_breadcrumb_alter().
 */
function openy_egym_iwatch_system_breadcrumb_alter(\Drupal\Core\Breadcrumb\Breadcrumb &$breadcrumb, \Drupal\Core\Routing\RouteMatchInterface $route_match, array $context) {
  if ($node = \Drupal::routeMatch()->getParameter('node')) {
    if (count(openy_egym_iwatch_search_node_paragraphs($node, ['banner_fixed']))) {
      $new = new Drupal\Core\Breadcrumb\Breadcrumb();
      $new->addCacheableDependency($breadcrumb);
      $breadcrumb = $new;
    }
  }
}

/**
 * Implements hook_preprocess_html().
 */
function openy_egym_iwatch_preprocess_html(&$variables) {
  if ($node = Drupal::routeMatch()->getParameter('node')) {
    if (count(openy_egym_iwatch_search_node_paragraphs($node, ['banner_fixed']))) {
      $variables['attributes']['class'][] = 'openy_egym_iwatch';
    }
  }
}

/**
 * Implements hook_preprocess_page().
 */
function openy_egym_iwatch_preprocess_page(&$variables) {
  if ($node = Drupal::routeMatch()->getParameter('node')) {
    if (count(openy_egym_iwatch_search_node_paragraphs($node, ['banner_fixed']))) {
      foreach ($variables['#attached']['library'] as $key => $lib) {
        if ($lib == 'openy_node_alert/alert') {
          unset($variables['#attached']['library'][$key]);
        }
      }
    }
  }
}
