<?php

/**
 * @file
 * Main module's file.
 */

use Drupal\node\Entity\Node;
use Drupal\paragraphs\Entity\Paragraph;
use Drupal\menu_link_content\Entity\MenuLinkContent;

/**
 * Deploy Program Event Framework related landing pages.
 */
function openy_demo_nlanding_pef_pages() {
  // Make sure that blocks are available.
  openy_enable_module('openy_repeat');
  drupal_flush_all_caches();

  /**
   * Get category ID by title.
   *
   * @param string $title
   *   Category title.
   *
   * @return mixed
   *   Category ID.
   */
  $get_activity_id_by_title = function ($title) {
    $query = \Drupal::entityQuery('node')
      ->condition('type', 'activity')
      ->condition('title', $title);
    $result = $query->execute();
    return reset($result);
  };

  $schedules_node = Node::create(
    [
      'type' => 'landing_page',
      'title' => 'Schedules',
      'langcode' => 'en',
      'uid' => '1',
      'status' => 1,
      'field_lp_layout' => ['value' => 'one_column_clean'],
    ]
  );
  $schedules_node->save();

  $locations_node = Node::create(
    [
      'type' => 'landing_page',
      'title' => 'Select location',
      'langcode' => 'en',
      'uid' => '1',
      'status' => 1,
      'field_lp_layout' => ['value' => 'one_column_clean'],
    ]
  );
  $locations_node->save();

  $group_exercises_nid = $get_activity_id_by_title('Group Exercise Classes');

  $schedules_paragraph = Paragraph::create(
    [
      'type' => 'repeat_schedules',
      'parent_id' => $schedules_node->id(),
      'parent_type' => 'node',
      'parent_field_name' => 'field_content',
      'status' => 1,
      'field_prgf_repeat_schedules_ref' => ['plugin_id' => 'repeat_schedules_block'],
      'field_prgf_repeat_schedules_pref' => ['target_id' => $locations_node->id()],
      'field_prgf_repeat_schedule_excl' => [
        [ 'target_id' => $group_exercises_nid ],
      ],
    ]
  );
  $schedules_paragraph->save();

  $schedules_node->field_content->entity = $schedules_paragraph;
  $schedules_node->save();

  $location_paragraph = Paragraph::create(
    [
      'type' => 'repeat_schedules_loc',
      'parent_id' => $locations_node->id(),
      'parent_type' => 'node',
      'parent_field_name' => 'field_content',
      'status' => 1,
      'field_prgf_block' => ['plugin_id' => 'repeat_schedules_loc_block'],
      'field_prgf_repeat_lschedules_prf' => ['target_id' => $schedules_node->id()],
    ]
  );
  $location_paragraph->save();

  $locations_node->field_content->entity = $location_paragraph;
  $locations_node->save();


  $db = \Drupal::database();
  $query = $db->select('menu_link_content_data', 'm');
  $query->condition('bundle', 'menu_link_content');
  $query->condition('enabled', 1);
  $query->condition('expanded', 1);
  $query->condition('m.menu_name', 'main');
  $query->condition('title', "Schedules");
  $query->fields('m', ['id']);
  $id = $query->execute()->fetchField();

  $parent_menu_link = MenuLinkContent::load($id);

  $schedules_pages_to_create = [];
  if ($parent_menu_link) {
    $schedules_pages_to_create = [
      [
        'title' => 'Group Exercise Classes',
        'activity_ids' => [
          $get_activity_id_by_title('Cardio'),
          $get_activity_id_by_title('Strength'),
          $get_activity_id_by_title('Forever Well'),
        ],
        'parent_menu_uuid' => $parent_menu_link->uuid(),
      ],
      [
        'title' => 'Programs & Activities',
        'activity_ids' => [
          $get_activity_id_by_title('Climbing - Adult'),
          $get_activity_id_by_title('Cooking Classes'),
          $get_activity_id_by_title('Health & Wellness Workshops'),
          $get_activity_id_by_title('Health Improvement'),
          $get_activity_id_by_title('Small Group and Specialty Training'),
          $get_activity_id_by_title('Small Group Training - Youth'),
          $get_activity_id_by_title('Weight Loss'),
        ],
        'parent_menu_uuid' => $parent_menu_link->uuid(),
      ],
      [
        'title' => 'Swim',
        'activity_ids' => [
          $get_activity_id_by_title('Swim Lessons - Child with Adult'),
          $get_activity_id_by_title('Swim Lessons - Preschool'),
          $get_activity_id_by_title('Swim Lessons - Private'),
          $get_activity_id_by_title('Swim Lessons - Teen'),
          $get_activity_id_by_title('Swim Lessons - Youth'),
          $get_activity_id_by_title('Swim Team'),
          $get_activity_id_by_title('Drop-In Swim'),
        ],
        'parent_menu_uuid' => $parent_menu_link->uuid(),
      ],
      [
        'title' => 'Personal Training',
        'activity_ids' => [
          $get_activity_id_by_title('Personal Training'),
          $get_activity_id_by_title('Small Group and Specialty Training'),
          $get_activity_id_by_title('Small Group Training - Youth'),
        ],
        'parent_menu_uuid' => $parent_menu_link->uuid(),
      ],
      [
        'title' => 'Camp',
        'activity_ids' => [
          $get_activity_id_by_title('BOLD One-Week Expeditions'),
          $get_activity_id_by_title('Discovery Day Camp'),
        ],
        'parent_menu_uuid' => $parent_menu_link->uuid(),
      ],
      [
        'title' => 'Kids & Teens',
        'activity_ids' => [
          $get_activity_id_by_title('Academic Enrichment - Youth'),
          $get_activity_id_by_title('Academic Success'),
          $get_activity_id_by_title('Arts & Crafts'),
          $get_activity_id_by_title('Before & After School Child Care'),
          $get_activity_id_by_title('Before & After School Programs'),
          $get_activity_id_by_title('Birthday Parties'),
          $get_activity_id_by_title('Earth Service Corps'),
          $get_activity_id_by_title('Kids Zone Activity Centers'),
          $get_activity_id_by_title('Preschool Child Care'),
          $get_activity_id_by_title('Sports Classes & Workshops - Youth'),
        ],
        'parent_menu_uuid' => $parent_menu_link->uuid(),
      ],
    ];
  }

  /**
   * Populate schedules pages.
   *
   * @param array $pages
   *   Array of pages.
   *
   * @throws \Exception
   */
  $pages_populate = function (array $pages) {
    foreach ($pages as $page) {
      // Create landing page.
      /** @var \Drupal\node\Entity\Node $node */
      $node = Node::create(
        [
          'type' => 'landing_page',
          'title' => $page['title'],
          'langcode' => 'en',
          'uid' => '1',
          'status' => 1,
          'field_lp_layout' => ['value' => 'one_column_clean'],
        ]
      );
      $node->save();

      // Get activity IDs.
      $activity_ids = [];
      foreach ($page['activity_ids'] as $activity_id) {
        $activity_ids[] = ['target_id' => $activity_id];
      }

      // Create schedules paragraph.
      $paragraph = Paragraph::create(
        [
          'type' => 'repeat_schedules',
          'parent_id' => $node->id(),
          'parent_type' => 'node',
          'parent_field_name' => 'field_content',
          'status' => 1,
          'field_prgf_block' => ['plugin_id' => 'repeat_schedules_block'],
          'field_prgf_repeat_schedule_categ' => $activity_ids,
          'field_prgf_repeat_schedule_instr' => ['value' => TRUE],
        ]
      );
      $paragraph->save();

      // Update landing page with created paragraph.
      $node->field_content->entity = $paragraph;
      $node->save();

      // Create menu link.
      $menu_link = MenuLinkContent::create([
        'title' => $page['title'],
        'link' => ['uri' => 'entity:node/' . $node->id()],
        'menu_name' => 'main',
        'parent' => 'menu_link_content:' . $page['parent_menu_uuid'],
        'expanded' => TRUE,
      ]);
      $menu_link->save();
    }
  };

  $pages_populate($schedules_pages_to_create);

  // For some reason repeat blocks do not have block's id in their
  // configuration. This is why we manually ensure they are set up.
  $process_paragraphs = function (array $tables, $plugin_id_field, $config_field) {
    foreach ($tables as $table) {
      // Select all paragraphs that have "broken" as plugin_id.
      $db = \Drupal::database();
      $query = $db->select($table, 'ptable');
      $query->fields('ptable');
      $query->condition('ptable.' . $plugin_id_field, 'broken');
      $broken_paragraphs = $query->execute()->fetchAll();

      // Update to correct plugin_id based on data array.
      foreach ($broken_paragraphs as $paragraph) {
        $data = unserialize($paragraph->{$config_field});

        if ($paragraph->bundle == 'repeat_schedules') {
          $data['id'] = 'repeat_schedules_block';
        }
        elseif ($paragraph->bundle == 'repeat_schedules_loc') {
          $data['id'] = 'repeat_schedules_loc_block';
        }

        $query = $db->update($table);
        $query->fields([
          $plugin_id_field => $data['id'],
          $config_field => serialize($data),
        ]);
        $query->condition('bundle', $paragraph->bundle);
        $query->condition('entity_id', $paragraph->entity_id);
        $query->condition('revision_id', $paragraph->revision_id);
        $query->condition('langcode', $paragraph->langcode);
        $query->execute();
      }
    }
  };

  $process_paragraphs(
    [
      'paragraph__field_prgf_block',
      'paragraph_revision__field_prgf_block',
    ],
    'field_prgf_block_plugin_id',
    'field_prgf_block_plugin_configuration'
  );
}

/**
 * Deploy Activity Finder related landing pages.
 */
function openy_demo_nlanding_af_pages() {
  // Make sure that blocks are available.
  openy_enable_module('openy_daxko2');
  openy_enable_module('search_api_solr');
  openy_enable_module('openy_activity_finder');
  openy_enable_module('openy_paragraph_activity_finder_search');
  openy_enable_module('openy_prgf_activity_finder');
  drupal_flush_all_caches();

  $af_node = Node::create(
    [
      'type' => 'landing_page',
      'title' => 'Activity Finder',
      'langcode' => 'en',
      'uid' => '1',
      'status' => 1,
      'field_lp_layout' => ['value' => 'one_column_clean'],
    ]
  );
  $af_node->save();

  $ps_node = Node::create(
    [
      'type' => 'landing_page',
      'title' => 'Program Search',
      'langcode' => 'en',
      'uid' => '1',
      'status' => 1,
      'field_lp_layout' => ['value' => 'one_column_clean'],
    ]
  );
  $ps_node->save();

  $af_paragraph = Paragraph::create(
    [
      'type' => 'activity_finder',
      'parent_id' => $af_node->id(),
      'parent_type' => 'node',
      'parent_field_name' => 'field_content',
      'status' => 1,
      'field_prgf_block' => ['plugin_id' => 'activity_finder_block'],
      'field_prgf_af_results_ref' => ['target_id' => $ps_node->id()],
    ]
  );
  $af_paragraph->save();

  $af_node->field_content->entity = $af_paragraph;
  $af_node->save();

  $ps_paragraph = Paragraph::create(
    [
      'type' => 'activity_finder_search',
      'parent_id' => $ps_node->id(),
      'parent_type' => 'node',
      'parent_field_name' => 'field_content',
      'status' => 1,
      'field_activity_finder_search' => ['plugin_id' => 'activity_finder_search_block'],
      'field_prgf_af_page_ref' => ['target_id' => $af_node->id()],
    ]
  );
  $ps_paragraph->save();

  $ps_node->field_content->entity = $ps_paragraph;
  $ps_node->save();

  $nid = \Drupal::service('entity.query')
    ->get('node')
    ->condition('title', 'Swimming Lessons at the YMCA')
    ->condition('type', 'landing_page')
    ->execute();
  $nid = reset($nid);
  $parent_menu_link = MenuLinkContent::load(39);
  // Create menu link.
  $menu_link = MenuLinkContent::create([
    'title' => 'Swimming Lessons at the YMCA',
    'link' => ['uri' => 'entity:node/' . $nid],
    'menu_name' => 'main',
    'parent' => 'menu_link_content:' . $parent_menu_link->uuid(),
    'expanded' => TRUE,
  ]);
  $menu_link->save();

  // For some reason af blocks do not have block's id in their
  // configuration. This is why we manually ensure they are set up.
  $process_paragraphs = function ($prgfs) {
    foreach ($prgfs as $prgf) {
      $tables = $prgf['tables'];
      $plugin_id_field = $prgf['plugin_id_field'];
      $config_field = $prgf['config_field'];
      foreach ($tables as $table) {
        // Select all paragraphs that have "broken" as plugin_id.
        $db = \Drupal::database();
        $query = $db->select($table, 'ptable');
        $query->fields('ptable');
        $query->condition('ptable.' . $plugin_id_field, 'broken');
        $broken_paragraphs = $query->execute()->fetchAll();

        // Update to correct plugin_id based on data array.
        foreach ($broken_paragraphs as $paragraph) {
          $data = unserialize($paragraph->{$config_field});

          if ($paragraph->bundle == 'activity_finder') {
            $data['id'] = 'activity_finder_block';
          }
          elseif ($paragraph->bundle == 'activity_finder_search') {
            $data['id'] = 'activity_finder_search_block';
          }
          $query = $db->update($table);
          $query->fields([
            $plugin_id_field => $data['id'],
            $config_field => serialize($data),
          ]);
          $query->condition('bundle', $paragraph->bundle);
          $query->condition('entity_id', $paragraph->entity_id);
          $query->condition('revision_id', $paragraph->revision_id);
          $query->condition('langcode', $paragraph->langcode);
          $query->execute();
        }
      }
    }
  };
  $process_paragraphs([
    0 => [
      'id' => 'activity_finder',
      'tables' => [
        'paragraph__field_prgf_block',
        'paragraph_revision__field_prgf_block',
      ],
      'plugin_id_field' => 'field_prgf_block_plugin_id',
      'config_field' => 'field_prgf_block_plugin_configuration',
    ],
    1 => [
      'id' => 'activity_finder_search',
      'tables' => [
        'paragraph__field_activity_finder_search',
        'paragraph_revision__field_activity_finder_search',
      ],
      'plugin_id_field' => 'field_activity_finder_search_plugin_id',
      'config_field' => 'field_activity_finder_search_plugin_configuration',
    ]
  ]);
}