<?php

/**
 * @file
 * Open Y Node Alert module file.
 */

use Drupal\Core\Entity\EntityInterface;
use Drupal\Core\Cache\Cache;

/**
 * Implements hook_preprocess_node().
 */
function openy_node_alert_preprocess_page(&$variables) {
  $variables['#attached']['library'][] = 'openy_node_alert/alert';
}

/**
 * Implements hook_entity_presave().
 */
function openy_node_alert_entity_presave(EntityInterface $entity) {

  // Check that we are saving Alert node.
  if (
    ($entity->getEntityTypeId() == 'node')
    && ($entity->bundle() == 'alert')
  ) {

    if (
      $entity->hasField('field_alert_visibility_pages')
      && !$entity->get('field_alert_visibility_pages')->isEmpty()
    ) {

      $visibility_paths = $entity->get('field_alert_visibility_pages')->getValue();
      $path_matcher = \Drupal::service('path_alias.manager');
      $cacheTags = [];
      foreach ($visibility_paths as $visibility_path) {
        $canonical_path = $path_matcher->getPathByAlias($visibility_path['value']);
        // Check if this path is a node path.
        if (strpos($canonical_path, 'node') !== FALSE) {
          $nid = explode('/', $canonical_path)[2];
          $cacheTags[] = 'node:' . $nid;

        }
      }
    }

    // Collecting nodes from the Reference field.
    if (
      $entity->hasField('field_alert_belongs')
      && !$entity->get('field_alert_belongs')->isEmpty()
    ) {
      $references = $entity->get('field_alert_belongs')->getValue();
      foreach ($references as $reference) {
        // Reference field is referenced to nodes, using this node tag.
        $cacheTags[] = 'node:' . $reference['target_id'];
      }
    }

    if (!empty($cacheTags)) {
      Cache::invalidateTags($cacheTags);
    }
  }

}
