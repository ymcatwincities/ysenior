<?php

/**
 * @file
 * OpenY Node Category module file.
 */

/**
 * Implements hook_ENTITY_TYPE_update().
 *
 * This will publish/unpublish Category nodes when a Program is updated.
 */
function openy_node_category_node_update(Drupal\Core\Entity\EntityInterface $entity) {
  // Only do this for Program nodes.
  if ($entity->getType() != 'program') {
    return;
  }
  // A Draft has been created â€“ ignore.
  if (!$entity->isDefaultRevision()) {
    return;
  }

  // Published will be true, unpublished false.
  $original_status = $entity->original->isPublished();
  $current_status = $entity->isPublished();

  if ($original_status && !$current_status) {
    // Going from published to unpublished.
    $status = false;
  } elseif (!$original_status && $current_status) {
    // Going from unpublished to published.
    $status = true;
  } else {
    // Status was unchanged.
    return;
  }

  $category_ids = _openy_node_category_getcategorynodes($entity);
  $batch = [
    'title' => t('Updating @type...', ['@type' => 'categories']),
    'operations' => [
      [
        '\Drupal\openy_node\BatchNodeUpdate::update',
        [
          $category_ids,
          $status,
          'category',
        ],
      ],
    ],
    'finished' => '\Drupal\openy_node\BatchNodeUpdate::finished',
  ];
  batch_set($batch);

}

/**
 * Helper function to retrieve the list of Category node ids that reference this
 * Program node.
 *
 * @param \Drupal\Core\Entity\EntityInterface $entity
 *   The Program node who's Category nodes will be retrieved.
 *
 * @return array $category_ids
 *   Array of Category node ids.
 */
function _openy_node_category_getcategorynodes(&$entity) {
  $program_id = $entity->id();

  $connection = \Drupal::database();

  $query = $connection->select('node__field_category_program', 'p');
  $query->condition('p.field_category_program_target_id', $program_id);
  $query->addField('p', 'entity_id');
  $result = $query->execute()->fetchAllAssoc('entity_id');

  $category_ids = array_keys($result);

  return $category_ids;
}
