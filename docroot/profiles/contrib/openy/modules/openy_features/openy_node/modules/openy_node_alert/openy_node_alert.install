<?php

/**
 * @file
 * Open Y Node Alert install file.
 */

use \Drupal\user\Entity\Role;
use \Drupal\user\RoleInterface;
use \Drupal\Component\Utility\Unicode;
use Drupal\field\Entity\FieldConfig;

/**
 * Implements hook_install().
 */
function openy_node_alert_install() {
  $roles = Role::loadMultiple([
    RoleInterface::ANONYMOUS_ID,
    RoleInterface::AUTHENTICATED_ID,
  ]);

  $permissions = [
    "restful get alerts_rest_resource",
  ];

  global $_openy_config_import_event;
  $_openy_config_import_event = TRUE;
  foreach ($roles as $role) {
    foreach ($permissions as $permission) {
      $role->grantPermission($permission);
    }
    $role->save();
  }
  $_openy_config_import_event = FALSE;
}

/**
 * Implements hook_update_dependencies().
 */
function openy_node_alert_update_dependencies() {
  $dependencies['openy_node_blog'] = [
    8012 => [
      'openy_node_alert' => 8010,
    ],
  ];

  $dependencies['openy'] = [
    8048 => [
      'openy_node_alert' => 8010,
    ],
  ];
  return $dependencies;
}

/**
 * Update fixes for the OpenY upgrade path support.
 */
function openy_node_alert_update_fixes() {
  // TODO: move this to highler level.
  \Drupal::service('module_installer')->install(['openy']);
}


/**
 * Update Alert for rabbit hole, hiding pages from anonymous users.
 */
function openy_node_alert_update_8001() {
  // This is outdated update and exist in next hooks, no need to import config twice.
}

/**
 * Import scheduler config.
 */
function openy_node_alert_update_8002() {
  // This is outdated update and exist in next hooks, no need to import config twice.
}

/**
 * Update description for fields.
 */
function openy_node_alert_update_8003() {
  // This is outdated update and exist in next hooks, no need to import config twice.
}

/**
 * Update Open Y alert node feature configs.
 */
function openy_node_alert_update_8004() {
  // This is outdated update and exist in next hooks, no need to import config twice.
}

/**
 * Update feature configs for Drupal Core upgrade.
 */
function openy_node_alert_update_8005() {
  // This is outdated update and exist in next hooks, no need to import config twice.
}

/**
 * Update feature configs for Drupal Alert CT upgrade.
 */
function openy_node_alert_update_8006() {
  // This is outdated update and exist in next hooks, no need to import config twice.
}

/**
 * Rename alert blocks configs.
 */
function openy_node_alert_update_8007() {
  \Drupal::service('module_installer')->install(['rest', 'hal', 'serialization']);
  openy_node_alert_update_8009();
  $configs = [
    'views_block__alerts_footer_alerts' => 'openy_rose_views_block__alerts_footer_alerts',
    'views_block__alerts_footer_alerts_local' => 'openy_rose_views_block__alerts_footer_alerts_local',
    'views_block__alerts_header_alerts' => 'openy_rose_views_block__alerts_header_alerts',
    'views_block__alerts_header_alerts_local' =>'openy_rose_views_block__alerts_header_alerts_local',
  ];
  foreach ($configs as $old_id => $new_id) {
    \Drupal::configFactory()
      ->rename('block.block.' . $old_id, 'block.block.' . $new_id);
    \Drupal::configFactory()->getEditable('block.block.' . $new_id)
      ->set('id', $new_id)
      ->save(TRUE);
  }
}

/**
 * Update permissions. Remove old configs.
 */
function openy_node_alert_update_8009() {
  // Enable modules one more time if 8007 already performed on site.
  \Drupal::service('module_installer')->install(['rest', 'hal', 'serialization']);
  $configs_to_remove = [
    'block.block.views_block__alerts_footer_alerts',
    'block.block.views_block__alerts_footer_alerts_local',
    'block.block.views_block__alerts_header_alerts',
    'block.block.views_block__alerts_header_alerts_local',
  ];
  // Prepare list of alert block configs to remove for currently installed themes.
  /** @var \Drupal\Core\Extension\ThemeHandlerInterface $theme_handler */
  $theme_handler = \Drupal::service('theme_handler');
  $list = $theme_handler->listInfo();
  foreach ($list as $theme => $info) {
    $configs_to_remove[] = 'block.block.' . $theme . '_views_block__alerts_footer_alerts';
    $configs_to_remove[] = 'block.block.' . $theme . '_views_block__alerts_footer_alerts_local';
    $configs_to_remove[] = 'block.block.' . $theme . '_views_block__alerts_header_alerts';
    $configs_to_remove[] = 'block.block.' . $theme . '_views_block__alerts_header_alerts_local';
  }
  $configs_to_remove[] = 'views.view.alerts';

  foreach ($configs_to_remove as $config) {
    \Drupal::configFactory()->getEditable($config)->delete();
  }
  openy_node_alert_install();
}

/**
 * Update alert nodes. Alerts shouldn't have content moderation enabled to succeed.
 */
function openy_node_alert_update_8010() {
  $config_dir = drupal_get_path('module', 'openy_node_alert') . '/config/install/';
  $configs = [
    'core.base_field_override.node.alert.promote',
    'core.entity_form_display.node.alert.default',
    'core.entity_view_display.node.alert.default',
    'core.entity_view_display.node.alert.node_alert_footer',
    'core.entity_view_display.node.alert.node_alert_header',
    'core.entity_view_display.node.alert.teaser',
    'core.entity_view_mode.node.node_alert_footer',
    'core.entity_view_mode.node.node_alert_header',
    'field.field.node.alert.field_alert_belongs',
    'field.field.node.alert.field_alert_color',
    'field.field.node.alert.field_alert_description',
    'field.field.node.alert.field_alert_icon_color',
    'field.field.node.alert.field_alert_link',
    'field.field.node.alert.field_alert_place',
    'field.field.node.alert.field_alert_text_color',
    'field.field.node.alert.field_alert_visibility_pages',
    'field.field.node.alert.field_alert_visibility_state',
    'field.storage.node.field_alert_belongs',
    'field.storage.node.field_alert_color',
    'field.storage.node.field_alert_description',
    'field.storage.node.field_alert_icon_color',
    'field.storage.node.field_alert_link',
    'field.storage.node.field_alert_place',
    'field.storage.node.field_alert_text_color',
    'field.storage.node.field_alert_visibility_pages',
    'field.storage.node.field_alert_visibility_state',
    'node.type.alert',
    'pathauto.pattern.alert',
    'rabbit_hole.behavior_settings.node_type_alert',
    'views.view.alert_belongs_reference',
    'rest.resource.alerts_rest_resource'
  ];

  // Import new configuration.
  $config_importer = \Drupal::service('openy_upgrade_tool.importer');
  $config_importer->setDirectory($config_dir);
  $config_importer->importConfigs($configs);

  $alerts = \Drupal::entityTypeManager()->getStorage('node')->loadByProperties(['type' => 'alert']);
  /** @var \Drupal\node\Entity\Node $alert */
  foreach ($alerts as $alert) {
    if ($alert->hasField('field_alert_belongs')) {
      if ($alert->hasField('field_alert_visibility_pages') && $alert->hasField('field_alert_visibility_state')) {
        $pages = $alert->get('field_alert_visibility_pages')->value;
        $state = $alert->get('field_alert_visibility_state')->value;
        if (!$state) {
          $state = 'include';
        }
        $pages = Unicode::strtolower($pages);

        $path_matcher = \Drupal::service('path.matcher');

        $refid = $alert->field_alert_belongs->target_id;
        if (!$refid) {
          $alert->set('field_alert_visibility_state', $state);
          $alert->save();
          continue;
        }
        $alias = \Drupal::service('path.alias_manager')->getAliasByPath('/node/' . $refid);
        $is_path_match = $path_matcher->matchPath($alias, $pages);
        if (!$is_path_match) {
          if ($pages) {
            $pages = $alias . "\n" . $pages;
          }
          else {
            $pages = $alias;
          }
          $alert->set('field_alert_visibility_state', $state);
          $alert->set('field_alert_visibility_pages', $pages);
          $alert->set('field_alert_belongs', NULL);
          $alert->save();
        }
      }
      else {
        \Drupal::logger(__FUNCTION__)->emergency('There are no fields to migrate into, skipping...');
      }
    }
  }
}

/**
 * Restore field_alert_belongs if not exist.
 */
function openy_node_alert_update_8011() {
  // Note: no need to check field existing, those configs anyway was changed
  // and should be imported.
  $config_dir = drupal_get_path('module', 'openy_node_alert') . '/config/install/';
  $configs = [
    'core.entity_form_display.node.alert.default',
    'core.entity_view_display.node.alert.default',
    'core.entity_view_display.node.alert.node_alert_footer',
    'core.entity_view_display.node.alert.node_alert_header',
    'core.entity_view_display.node.alert.teaser',
    'core.entity_view_mode.node.node_alert_footer',
    'core.entity_view_mode.node.node_alert_header',
    'field.field.node.alert.field_alert_belongs',
    'field.storage.node.field_alert_belongs',
  ];

  // Import updated configuration.
  $config_importer = \Drupal::service('openy_upgrade_tool.importer');
  $config_importer->setDirectory($config_dir);
  $config_importer->importConfigs($configs);
}

/**
 * Add functionality for Rearranging Alerts.
 */
function openy_node_alert_update_8012() {
  openy_node_alert_update_fixes();
  \Drupal::service('module_installer')->install(['draggableviews']);
  $config_dir = drupal_get_path('module', 'openy_node_alert') . '/config/install/';
  $configs = [
    'views.view.alerts_rearrange',
  ];
  $config_importer = \Drupal::service('openy_upgrade_tool.importer');
  $config_importer->setDirectory($config_dir);
  $config_importer->importConfigs($configs);
}
