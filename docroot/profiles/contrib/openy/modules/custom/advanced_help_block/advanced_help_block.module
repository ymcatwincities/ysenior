<?php

/**
 * @file
 * Module file.
 */

use Drupal\advanced_help_block\Entity\AdvancedHelpBlock;
use Drupal\Component\Utility\Unicode;
use Drupal\Core\Url;
use Drupal\Core\Link;

/**
 * Implements hook_help().
 */
function advanced_help_block_help($path, $arg) {
  $query = \Drupal::entityQuery('advanced_help_block');
  $entity_ids = $query->execute();

  $output = [];

  $config_factory = \Drupal::configFactory();
  $render_type = $config_factory->getEditable('advanced_help_block.settings')
    ->get('advanced_help_block.view_type');

  if (!$render_type) {
    $render_type = 'block';
  }

  $ids = [];
  foreach ($entity_ids as $entity_id) {
    $ids[] = $entity_id;
  }
  $chunks = array_chunk($ids, 50);
  foreach ($chunks as $chunk) {
    $blocks = AdvancedHelpBlock::loadMultiple($chunk);

    foreach ($blocks as $block) {

      if (advanced_help_block_check_visibility($block)) {
        $link = '';
        if (!empty($block->field_ahb_video->value)) {
          parse_str(parse_url($block->field_ahb_video->value, PHP_URL_QUERY), $url_params);
          $link = Link::fromTextAndUrl('Watch video',
            Url::fromUri($block->field_ahb_video->value, [
              'attributes' => [
                'youtubeid' => $url_params['v'],
                'class' => ['youtube-link button button-action button--small'],
              ],
            ])
          )->toString();
        }
        $output[$block->id()] = [
          'title' => $block->field_ahb_title->value,
          'description' => check_markup($block->field_ahb_description->value, $block->field_ahb_description->format),
          'video' => $block->field_ahb_video->value,
          'youtube_link' => $link,
        ];

        if ($render_type == 'message') {
          drupal_set_message(t('<h3>%title</h3>%description @link', [
            '@link' => $link,
            '%title' => $block->field_ahb_title->value,
            '%description' => check_markup($block->field_ahb_description->value, $block->field_ahb_description->format),
          ]), 'status');
        }
      }
    }
  }

  if ($render_type == 'message') {
    $output = [];
    $render_type = '';
  }

  return [
    '#theme' => 'advanced_help_block_list_render',
    '#blocks' => $output,
    '#render_type' => $render_type,
    '#cache' => ['max-age' => 0],
  ];

}

/**
 * Imlements hook_theme().
 */
function advanced_help_block_theme($existing, $type, $theme, $path) {
  return [
    'advanced_help_block_list_render' => [
      'variables' => [
        'blocks' => [],
        'render_type' => '',
      ],
    ],
  ];
}

/**
 * Helper for defining if block is shown on current page.
 */
function advanced_help_block_check_visibility(AdvancedHelpBlock $entity) {
  $pages = '';
  if ($entity->hasField('field_ahb_pages')) {
    $pages = $entity->get('field_ahb_pages')->value;
  }

  $state = 'include';
  if ($entity->hasField('field_ahb_visibility')) {
    $state = $entity->get('field_ahb_visibility')->value;
  }

  $pages = Unicode::strtolower($pages);
  if (!$pages) {
    return FALSE;
  }

  /** @var \Drupal\Core\Path\PathMatcher $path_matcher */
  $path_matcher = \Drupal::service('path.matcher');

  // Convert path to lowercase. This allows comparison of the same path.
  // with different case. Ex: /Page, /page, /PAGE.
  // Compare the lowercase path alias (if any) and internal path.
  $current_path = \Drupal::service('path.current')->getPath();
  $path = \Drupal::service('path_alias.manager')->getAliasByPath($current_path);
  $path = Unicode::strtolower($path);

  // Do not trim a trailing slash if that is the complete path.
  $path = $path === '/' ? $path : rtrim($path, '/');

  $pagesArray = explode(',', $pages);
  foreach ($pagesArray as $page) {
    $page = trim($page, ' ');
    $is_path_match = $path_matcher->matchPath($path, $page);
    if ($state == 'include' && $is_path_match || $state == 'exclude' && !$is_path_match) {
      return TRUE;
    }
  }

  return FALSE;
}
